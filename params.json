{"name":"Knotter","tagline":"knot module is a nodejs middleware to create websites","body":"# knotter\r\n\r\nknotter module is a nodejs middleware/microframework to create websites.\r\n\r\n## Why not using connect ? express ?\r\n\r\nI really love ExpressJS and Connect. But what I wanted to do was to implement a pseudo WSGI-like system. \r\nThe main goal is to bundle some of my prefered modules in one place:\r\n\r\n - sessions - simple session management\r\n - swig for template engine (you must use consolidate module)\r\n - use mimetype, underscore, etc...\r\n\r\n## How to use ?\r\n\r\nAt this time, you need to do some operation manually:\r\n  \r\n    cd /path/to/yor/working/directory\r\n    npm install knotter\r\n\r\nThen, you can implement your first appliction, create a \"site.js\" file:\r\n```javascript    \r\n\r\nvar knotter = require('knotter');\r\n\r\n//handler should serve get, post, put, delete requests\r\n//you only have to implement route (as regexp) with right name\r\nvar Page1Handler = new knotter.Handler({\r\n  route: '/page1',\r\n  useSessions: false, //if true, this.sessions can be used to get values\r\n  get: function (){\r\n    // there you can get: this.sessions, this.response, this.request\r\n    // and this.params.args (ordered from captured regexp if any)\r\n    // and this.params.get (given by ?arg=value&arg2=value2...)\r\n    // \r\n    // you can write response with this.end(\"Text to send to client\");\r\n    // or render a template: this.render('path to template', context_object)\r\n    \r\n    this.response.end(\"Welcome on page 1 !\");\r\n  },\r\n  \r\n  post: function() {\r\n   // handler POST, you can access this.XXX like on GET method\r\n   // and this.postdata !\r\n   console.log(this.postdata);\r\n   this.response.end(\"post data ok\");\r\n   \r\n  }\r\n});\r\n\r\n\r\nvar server = knotter.Server({\r\n  handlers : [Page1Handler], //list of handlers,\r\n  statics : {'styles': 'css'} // 127.0.0.1/styles/... will take \r\n                              // files in \"css\" directory\r\n  /*\r\n  statics : ['css', 'js'], // directory names to be served statically\r\n  you can pass \"address\" option to set listening address\r\n  address : \"0.0.0.0\"   //to listen on every interfaces\r\n  */\r\n});\r\n\r\nserver.serve(); //default listen on 127.0.0.1:8000 (open 127.0.0.1:8000/page1 to check result)\r\n```\r\n\r\n\r\n## Note on Template Engine\r\n\r\nIn 0.0.2, knotter could implement swig template engine. But we removed this option to let user using its own prefered template engine. Knotter goal is not to be a \"full framework\" and should stay \"lightweight\"\r\n\r\nWe will prepare a framework based on knotter that will implement some modules as:\r\n- blog\r\n- cms\r\n- comments\r\n\r\n\r\n## Changelog\r\n\r\n0.0.4\r\n- documentation is better\r\n- static files can now be mapped on other routes (see example)\r\n\r\n0.0.3\r\n-  remove swig template engine, to let developper use its prefered engine.\r\n\r\n## About File upload, forms...\r\n\r\nAt this time, I didn't found any \"nice\" way to setup a file uploader. \"Nice\" means:\r\n- having a simple interface to save file to an \"upload\" directory\r\n- having a method to give the upload progression state\r\n- no soucy with rights, mimetype, form encoding...\r\n\r\nI guess I will implement \"formidable\" module to manage forms... One more time, I'm open to discuss.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}