{"name":"Knotter","tagline":"knot module is a nodejs middleware to create websites","body":"# knotter\r\n\r\nknotter module is a nodejs middleware/microframework to create websites.\r\n\r\n## Why not using connect ? express ?\r\n\r\nI really love ExpressJS and Connect. But what I wanted to do was to implement a pseudo WSGI-like system. \r\nThe main goal is to bundle some of my prefered modules in one place:\r\n\r\n - sessions - simple session management\r\n - swig for template engine\r\n - use mimetype, underscore, etc...\r\n\r\n## How to use ?\r\n\r\nAt this time, you need to do some operation manually:\r\n  \r\n    cd /path/to/yor/working/directory\r\n    npm install knotter\r\n\r\nThen, you can implement your first appliction, create a \"site.js\" file:\r\n```javascript    \r\n\r\n/**\r\n* Create your class that inherits from knotter.Handler\r\n*/\r\nfunction Page1Handler = (){\r\n    knotter.Handler.call(this);\r\n}\r\nutil.inherits(Page1Handler, knotter.Handler);\r\n\r\n// define the route to respond (regexp)\r\n// It is important that \"route\" is declared in prototype\r\nPage1Handler.prototype.route = '/page1';\r\n\r\n// Respond to \"GET\" requests\r\nPage1Handler.prorotype.get = function (){\r\n    // there you can get: this.sessions, this.response, this.request\r\n    // and this.params.args (ordered from captured regexp if any)\r\n    // and this.params.get (given by ?arg=value&arg2=value2...)\r\n    // \r\n    // you can write response with this.end(\"Text to send to client\");\r\n    // or render a template: this.render('path to template', context_object)\r\n    \r\n    this.end(\"Welcome on page 1 !\");\r\n};\r\n\r\n\r\nvar server = knotter.Server({\r\n  handlers : [Page1Handler], //list of handlers classes,\r\n  statics : {\r\n    statics : 'staticdir',\r\n    images  : 'imgdir'\r\n  }, // directories to be served statically, eg. /images/test.png serves imgdir/test.png\r\n  // you can pass \"address\" option to set listening address\r\n  // address : \"0.0.0.0\" to listen on every interfaces\r\n});\r\n\r\nserver.serve(); //default listen on 127.0.0.1:8000 (open 127.0.0.1:8000/page1 to check result)\r\n```\r\n\r\n\r\n## Note on Template Engine\r\n\r\nin 0.0.2, knotter could implement swig template engine. But we removed this options to let user using its own prefered template engine. Knotter goals is not to be a \"full framework\" and should stay \"lightwave\"\r\n\r\nNow template engines are managed by the \"consolidate\" module. We only tested \"swig\" as engine and it works as expected. To use swig:\r\n\r\n```javascript\r\n\r\nvar server = knotter.Server({\r\n    //...\r\n    engine: 'swig',\r\n    templates: __dirname+\"/templates\",\r\n    engineOptions: {\r\n        root: __dirname+'/templates',\r\n        allowErrors: true,\r\n        autoescape: false,\r\n        tzOffset: new Date().getTimezoneOffset(),\r\n        cache: false\r\n    }\r\n});\r\n\r\n```\r\n\r\nAfterward, in handler, you can use:\r\n\r\n```javascript\r\n\r\n//...\r\n// test.html should be in __dirname/templates directory\r\n// ctx is an object that handle some vars you can\r\n// use in template\r\nthis.render('test.html', ctx);\r\n\r\n```\r\n\r\n\r\nWe will prepare a framework based on knotter that will implement some module as:\r\n- blog\r\n- cms\r\n- comments\r\n\r\n\r\n## Changelog\r\n\r\n0.1.1\r\n- Sessions are now fixed\r\n- handlers are classes, see example\r\n\r\n0.1.0\r\n- Add session management and remove \"sessions\" external module\r\n- Sessions are shared in cluster implementation, you should use knotter.Cluster.addWorker(...)\r\n- Use consolidate module to implement several template engines\r\n- Remove \"new knotter.Handler\" notion, you should only set handlers as structure (this may change or be improved later)\r\n- new dependecy = uuid (to set cookie SESSID)\r\n- todo: set session TTL and SESSID name editable\r\n- Pleas use \"this.write, this.end\" and not \"this.response.xxx\" method now !\r\n\r\n0.0.4\r\n- documentation is better\r\n- static files can now be mapped on other routes (see example)\r\n\r\n0.0.3\r\n-  remove swig template engine, to let developper use its prefered engine.\r\n\r\n## About File upload, forms...\r\n\r\nAt this time, I didn't found any \"nice\" way to setup a file uploader. \"Nice\" means:\r\n- having a simple interface to save file to a \"upload\" directory\r\n- having a method to give upload progress\r\n- no soucy with rights, mimetype, form encoding...\r\n\r\nI guess I will implement \"formidable\" module to manage forms... One more time, I'm open to discuss about.\r\n","google":"UA-38377684-1","note":"Don't delete this file! It's used internally to help with page regeneration."}